// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.TimeZone
{
    public partial class ReferenceTime
    {
        internal static ReferenceTime DeserializeReferenceTime(JsonElement element)
        {
            Optional<string> tag = default;
            Optional<string> standardOffset = default;
            Optional<string> daylightSavings = default;
            Optional<string> wallTime = default;
            Optional<int> posixTzValidYear = default;
            Optional<string> posixTz = default;
            Optional<DateTimeOffset> sunrise = default;
            Optional<DateTimeOffset> sunset = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Tag"))
                {
                    tag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("StandardOffset"))
                {
                    standardOffset = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("DaylightSavings"))
                {
                    daylightSavings = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("WallTime"))
                {
                    wallTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("PosixTzValidYear"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    posixTzValidYear = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("PosixTz"))
                {
                    posixTz = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Sunrise"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sunrise = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("Sunset"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sunset = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new ReferenceTime(tag.Value, standardOffset.Value, daylightSavings.Value, wallTime.Value, Optional.ToNullable(posixTzValidYear), posixTz.Value, Optional.ToNullable(sunrise), Optional.ToNullable(sunset));
        }
    }
}
